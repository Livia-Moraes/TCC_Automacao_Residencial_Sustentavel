#include <ESP32Servo.h>        // Inclui a biblioteca para controle dos servos no ESP32
#include <Arduino.h>           // Inclui a biblioteca principal do Arduino para funcionalidades básicas
#include <WiFi.h>              // Inclui a biblioteca para controle do Wi-Fi
#include <UniversalTelegramBot.h> // Inclui a biblioteca para comunicação com o Telegram
#include <WiFiClientSecure.h>  // Inclui a biblioteca para conexões Wi-Fi seguras

// Dados do Wi-Fi
const char* ssid = " ";    // Define o nome da rede Wi-Fi (SSID)
const char* password = " "; // Define a senha da rede Wi-Fi

// Dados do Bot
const char* telegramToken = " "; // Token do bot do Telegram

const int ldrNortePin = 34;   // Define o pino analógico para o LDR Norte
const int ldrSulPin = 35;     // Define o pino analógico para o LDR Sul
const int ldrLestePin = 32;   // Define o pino analógico para o LDR Leste
const int ldrOestePin = 33;   // Define o pino analógico para o LDR Oeste
const int limiar = 1000;      // Valor mínimo para detectar luz suficiente
const int neutrolimiar = 500; // Valor para a posição neutra

Servo servoNS;                // Cria o objeto para o servo Norte-Sul
Servo servoLO;                // Cria o objeto para o servo Leste-Oeste

int posicaoAtualNS = 90;      // Posição inicial do servo Norte-Sul
int posicaoAtualLO = 90;      // Posição inicial do servo Leste-Oeste

// Configuração do Telegram
WiFiClientSecure client;      // Cria o cliente Wi-Fi seguro
UniversalTelegramBot bot(telegramToken, client); // Inicializa o bot com o token e cliente
unsigned long bot_lasttime = 0; // Variável para armazenar o último horário de atualização do bot
const int botRequestDelay = 1000;  // Delay entre as requisições do bot (em milissegundos)

void setup() {
  Serial.begin(9600);          // Inicia a comunicação serial a 9600 baud

  // Configuração do Wi-Fi
  WiFi.begin(ssid, password);  // Conecta-se ao Wi-Fi com o SSID e a senha definidos
  while (WiFi.status() != WL_CONNECTED) { // Aguarda até a conexão ser estabelecida
    delay(500);
    Serial.print(".");         // Imprime "." enquanto tenta conectar
  }
  Serial.println("Conectado ao WiFi"); // Informa que a conexão foi estabelecida

  // Configuração do SSL
  client.setInsecure();        // Desativa a verificação do certificado para conexões SSL

  // Configuração dos servos
  servoNS.attach(14);          // Conecta o servo Norte-Sul no pino GPIO14
  servoLO.attach(12);          // Conecta o servo Leste-Oeste no pino GPIO12

  // Define as posições iniciais dos servos
  servoNS.write(posicaoAtualNS);  
  servoLO.write(posicaoAtualLO);
  delay(3000);                 // Aguarda 3 segundos para estabilização
}

// Função para mover o servo lentamente até a posição final
void moverServoLento(Servo &servo, int &posicaoAtual, int posicaoFinal) {
  if (posicaoAtual != posicaoFinal) { // Verifica se a posição final é diferente da atual
    if (posicaoAtual < posicaoFinal) { // Caso o movimento seja para aumentar a posição
      for (int pos = posicaoAtual; pos <= posicaoFinal; pos++) {
        servo.write(pos);        // Ajusta o servo para a posição
        delay(20);               // Aguarda 20 ms entre os movimentos
      }
    } else {                     // Caso o movimento seja para diminuir a posição
      for (int pos = posicaoAtual; pos >= posicaoFinal; pos--) {
        servo.write(pos);
        delay(20);  
      }
    }
    posicaoAtual = posicaoFinal; // Atualiza a posição atual
  }
}

// Função para lidar com as novas mensagens
void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) { // Percorre todas as novas mensagens recebidas
    String chat_id = String(bot.messages[i].chat_id); // Armazena o ID do chat
    String text = bot.messages[i].text; // Armazena o texto da mensagem

    String resposta;
    if (text == "/start") {
      resposta = "Bem-vindo! Use /ajuda para ver os comandos disponíveis.";
    } else if (text == "/informacao") {
      resposta = "O rastreador solar foi projetado pensando na melhora da eficiência energética da geração de energia, com as posições do painel sendo ajustadas de acordo com a intensidade da luz solar no sensor de luminosidade.\n"
           "Para que seja possível ter mais autonomia na sua geração, você pode calcular a quantidade de energia gerada por um painel usando a fórmula: (Energia (kWh) = Potência do Painel (kW) * Irradiação Solar (kWh/m².dia) * Eficiência * Dias).\n"
           "A irradiação solar varia de acordo com cada região e isso deve ser levado em conta. Para mais informações detalhadas sobre como fazer esse cálculo, consulte: https://blog.solfacil.com.br/energia-solar/como-calcular-a-energia-gerada-por-um-painel-solar/";

    } else if (text == "/porcentagem_norte") {
      int ldrNorteValue = analogRead(ldrNortePin);
      resposta = "Porcentagem Norte: " + String((ldrNorteValue * 100) / 4095) + "%";
    } else if (text == "/porcentagem_sul") {
      int ldrSulValue = analogRead(ldrSulPin);
      resposta = "Porcentagem Sul: " + String((ldrSulValue * 100) / 4095) + "%";
    } else if (text == "/porcentagem_leste") {
      int ldrLesteValue = analogRead(ldrLestePin);
      resposta = "Porcentagem Leste: " + String((ldrLesteValue * 100) / 4095) + "%";
    } else if (text == "/porcentagem_oeste") {
      int ldrOesteValue = analogRead(ldrOestePin);
      resposta = "Porcentagem Oeste: " + String((ldrOesteValue * 100) / 4095) + "%";
    } else if (text == "/ambos") {
      int ldrNorteValue = analogRead(ldrNortePin);
      int ldrSulValue = analogRead(ldrSulPin);
      int ldrLesteValue = analogRead(ldrLestePin);
      int ldrOesteValue = analogRead(ldrOestePin);
      resposta = "Porcentagem Norte: " + String((ldrNorteValue * 100) / 4095) + "%\n" +
           "Porcentagem Sul: " + String((ldrSulValue * 100) / 4095) + "%\n" +
           "Porcentagem Leste: " + String((ldrLesteValue * 100) / 4095) + "%\n" +
           "Porcentagem Oeste: " + String((ldrOesteValue * 100) / 4095) + "%";

    } else if (text == "/ajuda") {
      resposta = "Comandos disponíveis:\n"
           "/start - Iniciar o bot\n"
           "/informacao - Informações sobre o bot\n"
           "/porcentagem_norte - Percentagem Norte\n"
           "/porcentagem_sul - Percentagem Sul\n"
           "/porcentagem_leste - Percentagem Leste\n"
           "/porcentagem_oeste - Percentagem Oeste\n"
           "/ambos - Norte, Sul, Leste e Oeste\n"
           "/ajuda - Lista de comandos";

    } else {
      resposta = "Comando não reconhecido.";
    }

    bot.sendMessage(chat_id, resposta, ""); // Envia a resposta via bot
  }
}

void loop() {
  // Lê os valores dos LDRs e controla os servos
  int ldrNorteValue = analogRead(ldrNortePin); // Lê o LDR Norte
  int ldrSulValue = analogRead(ldrSulPin);     // Lê o LDR Sul
  int ldrLesteValue = analogRead(ldrLestePin); // Lê o LDR Leste
  int ldrOesteValue = analogRead(ldrOestePin); // Lê o LDR Oeste

  // Controla o servo Norte-Sul com base nos valores dos LDRs
  if (ldrNorteValue > limiar && ldrNorteValue > ldrSulValue) {
    Serial.println("Luz detectada no Norte");
    moverServoLento(servoNS, posicaoAtualNS, 0); // Posição para o norte
  } else if (ldrSulValue > limiar && ldrSulValue > ldrNorteValue) {
    Serial.println("Luz detectada no Sul");
    moverServoLento(servoNS, posicaoAtualNS, 180); // Posição para o sul
  } else if (ldrNorteValue < neutrolimiar && ldrSulValue < neutrolimiar) {
    Serial.println("Luz insuficiente - posição neutra");
    moverServoLento(servoNS, posicaoAtualNS, 90); // Posição neutra para o NS
  }

  // Controla o servo Leste-Oeste com base nos valores dos LDRs
  if (ldrLesteValue > limiar && ldrLesteValue > ldrOesteValue) {
    Serial.println("Luz detectada no Leste");
    moverServoLento(servoLO, posicaoAtualLO, 0); // Posição para o leste
  } else if (ldrOesteValue > limiar && ldrOesteValue > ldrLesteValue) {
    Serial.println("Luz detectada no Oeste");
    moverServoLento(servoLO, posicaoAtualLO, 180); // Posição para o oeste
  } else if (ldrLesteValue < neutrolimiar && ldrOesteValue < neutrolimiar) {
    Serial.println("Luz insuficiente - posição neutra");
    moverServoLento(servoLO, posicaoAtualLO, 90); // Posição neutra para o LO
  }

  // Processa qualquer nova mensagem do Telegram
  if (millis() - bot_lasttime > botRequestDelay) {
    int numNewMessages = bot.getUpdates(bot_lasttime); // Obtém novas mensagens do Telegram
    if (numNewMessages) {
      handleNewMessages(numNewMessages); // Processa as novas mensagens
      bot_lasttime = millis(); // Atualiza o horário da última verificação
    }
  }
}
